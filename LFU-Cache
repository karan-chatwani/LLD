class LFUCache {
    int c;
    map<int,list<int>> l; //frequency wise list
    unordered_map<int,int> m;
    unordered_map<int,pair<int,list<int> :: iterator>> mv;


public:
    LFUCache(int capacity) {
        c=capacity;
    }
    
    int get(int key) {
       if(m.find(key)==m.end()) return -1;
        auto it=mv[key];
        l[m[key]].erase(it.second);
        mv.erase(key);
        if(l[m[key]].size()==0) l.erase(m[key]);
        m[key]++;
        l[m[key]].push_front(key);
        mv[key]={it.first,l[m[key]].begin()};
        return it.first;
    }
    
    void put(int key, int value) {
        if(m.find(key)!=m.end()&& mv.find(key)!=mv.end()){
         auto it=mv[key];
         l[m[key]].erase(it.second);
        mv.erase(key);
        if(l[m[key]].size()==0) l.erase(m[key]);
        m[key]++;
        l[m[key]].push_front(key);
        mv[key]={value,l[m[key]].begin()};
        return;
        }
        if(m.size()==c){
            int freq=l.begin()->first;
            list<int> temp=l.begin()->second;
            int ke=temp.back();
            m.erase(ke);
            mv.erase(ke);
            l[freq].pop_back();
            if(l[freq].size()==0) l.erase(freq);
        }
            m[key]++;
            l[m[key]].push_front(key);
            mv[key]={value,l[m[key]].begin()};
            return;
       

    }
};
/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
